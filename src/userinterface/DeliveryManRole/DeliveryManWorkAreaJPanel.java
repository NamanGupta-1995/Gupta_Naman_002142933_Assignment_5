/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.Customer.Customer;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private UserAccount userAccount;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem ecoSystem) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.ecoSystem = ecoSystem;
        for(DeliveryMan dm : ecoSystem.getDeliveryManDirectory().getDeliveryManDirectory()){
             if(dm.getEmail().equals(account.getUsername())) {
                  populateTable(dm);
             }
         }
    }
    
    public void populateTable(DeliveryMan deliveryMan){
        DefaultTableModel model = (DefaultTableModel) tblDeliveryMan.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[4];
        row[0] = deliveryMan.getOrderRequest().getMessage();
        row[1] = deliveryMan.getOrderRequest().getReceiver();
        row[2] = deliveryMan.getOrderRequest().getSender();
        row[3] = deliveryMan.getOrderRequest().getStatus();
           
        model.addRow(row);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDeliveryMan = new javax.swing.JTable();
        btnDelivered = new javax.swing.JButton();
        btnAcceptOrder = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblDeliveryMan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Restaurant", "Customer", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDeliveryMan);
        if (tblDeliveryMan.getColumnModel().getColumnCount() > 0) {
            tblDeliveryMan.getColumnModel().getColumn(0).setResizable(false);
            tblDeliveryMan.getColumnModel().getColumn(1).setResizable(false);
            tblDeliveryMan.getColumnModel().getColumn(2).setResizable(false);
            tblDeliveryMan.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 770, 96));

        btnDelivered.setText("Mark Delivered");
        btnDelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveredActionPerformed(evt);
            }
        });
        add(btnDelivered, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 190, -1, -1));

        btnAcceptOrder.setText("Accept Order");
        btnAcceptOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptOrderActionPerformed(evt);
            }
        });
        add(btnAcceptOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 190, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 190, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveredActionPerformed

        int selectedRow = tblDeliveryMan.getSelectedRow();
        Object x = tblDeliveryMan.getModel();
        
        if (selectedRow < 0){
            return;
        }
        
        //DefaultTableModel model = (DefaultTableModel) tblDeliveryMan.getModel();
        //WorkRequest request = (WorkRequest)model.getValueAt(selectedRow, 0);
        //request.setReceiver(userAccount);
        //request.setStatus("Order Delivered");
                for(DeliveryMan dm : ecoSystem.getDeliveryManDirectory().getDeliveryManDirectory()){
             if(dm.getEmail().equals(this.userAccount.getUsername())) {
                 dm.getOrderRequest().setStatus("Order Delivered");
                  populateTable(dm);
             }
         }
        
    }//GEN-LAST:event_btnDeliveredActionPerformed

    private void btnAcceptOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptOrderActionPerformed
        
        int selectedRow = tblDeliveryMan.getSelectedRow();
        //Object x = tblDeliveryMan.getModel();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "No order selected"
                    + "Delivery Man", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        //DefaultTableModel model = (DefaultTableModel) tblDeliveryMan.getModel();
        //Object y = tblDeliveryMan.getValueAt(selectedRow, 3);
        //WorkRequest request = (WorkRequest)tblDeliveryMan.getValueAt(selectedRow,0);
        //request.setStatus("Waiting to be delivered");
        
                for(DeliveryMan dm : ecoSystem.getDeliveryManDirectory().getDeliveryManDirectory()){
             if(dm.getEmail().equals(this.userAccount.getUsername())) {
                 dm.getOrderRequest().setStatus("Waiting to be delivered");
                  populateTable(dm);
             }
         }
    }//GEN-LAST:event_btnAcceptOrderActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        for(DeliveryMan dm : ecoSystem.getDeliveryManDirectory().getDeliveryManDirectory()){
             if(dm.getEmail().equals(this.userAccount.getUsername())) {
                  populateTable(dm);
             }
         }
    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptOrder;
    private javax.swing.JButton btnDelivered;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tblDeliveryMan;
    // End of variables declaration//GEN-END:variables
}
